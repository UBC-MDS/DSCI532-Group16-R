wood_model <-  lm(log(fat) ~ week + log(week), data = fat_content)
tidy(wood_model)
glance(wood_model)
tidy(wood_model)
glance(wood_model)
# Your answer goes here.
predictions_milk_fat <- bind_rows(
tibble(predictions=predict(initial_model, newdata=tibble(week=1:45)),
week=1:45,
model='Initial Model'),
tibble(predictions=exp(predict(log_response_model, newdata=tibble(week=1:45))+ 0.5 * glance(log_response_model)$sigma^2),
week=1:45,
model='Response Model'),
tibble(predictions=exp(predict(wood_model, newdata=tibble(week=1:45)) + 0.5 * glance(wood_model)$sigma^2),
week=1:45,
model='Wood Model'))
predictions_milk_fat
plot_fat_content <- ggplot(fat_content, aes(x=week, y=fat)) + geom_point() + geom_vline(xintercept=35,  linetype="dotted", color='grey14') +  geom_hline(yintercept=0,  linetype="dotted", color='grey14')
plot_fat_content
plot_fat_content +
geom_line(data=predictions_milk_fat, aes(x=week, y=predictions, color=model))
round(anova(log_response_model,
wood_model, test = "Chi"), 4)
# Your coding answer goes here.
# Your coding answer goes here.
# Your coding answer goes here.
titanic <- read_csv("titanic.csv")
head(titanic)
options(repr.plot.height = 5.5, repr.plot.width = 18)
suppressMessages(print(titanic %>%
ggplot() +
geom_point(aes(Fare, Survived)) + geom_smooth(aes(Fare, Survived), method = "lm", se = FALSE) +
labs(y = "Survived", x = "Fare") + ggtitle("Fare vs Survived (by Sex)") +
theme(
plot.title = element_text(size = 24, face = "bold"),
axis.text = element_text(size = 14),
axis.title = element_text(size = 16)
) + facet_wrap(~Sex)))
options(repr.plot.height = 5.5, repr.plot.width = 18)
Titanic_scatterplot <- titanic %>%
ggplot() +
geom_point(aes(Fare, Survived)) +
geom_smooth(aes(Fare, Survived), method = "lm", se = FALSE) +
labs(y = "Survived", x = "Fare") + ggtitle("Fare vs Survived Probability") +
theme(
plot.title = element_text(size = 24, face = "bold"),
axis.text = element_text(size = 14),
axis.title = element_text(size = 16)
)
Titanic_scatterplot
# sex_fare <- titanic %>%
#   select(Sex, Fare)
#
# binomial_log_model <- glm(as.factor(Survived) ~ Sex + Fare, data = titanic,
#                             family = binomial)
#
# titanic$Survived_p <- round(predict(binomial_log_model, sex_fare, type = "response"), 2)
#
bin_log_model <- glm(as.factor(Survived) ~  Fare, data = titanic, family = binomial)
tidy(bin_log_model)
# Your answer goes here.
Titanic_scatterplot + geom_smooth(aes(Fare, Survived), method = "glm", method.args = c(family = binomial), se = FALSE, color = "red")
titanic <- titanic %>%
mutate(Sex = factor(Sex, levels = c("male","female")))
bin_log_model_2 <- glm(as.factor(Survived) ~  Fare + Sex , data = titanic, family = binomial)
tidy(bin_log_model_2)
glance(bin_log_model)
glance(bin_log_model_2)
tidy(bin_log_model_2)
round(exp(bin_log_model_2$coefficients), 2)
round(predict(bin_log_model_2, tibble(Fare = 100, Sex = "female"), type = "response"), 2)
# Your answer goes here.
print(binned_residuals(bin_log_model_2, size = 4))
library(Lahman)
teams <- Teams %>%
select(runs = R, walks = BB, hits = H) %>%
as_tibble()
head(teams)
ggplot(teams, aes(x=walks, y=runs)) + geom_point()
ggplot(teams, aes(x=hits, y=runs)) + geom_point()
# Your answer goes here.
poisson_model <- glm(runs ~ walks + hits, family = poisson, data = teams)
poisson_model
tidy(poisson_model)
round(exp(tidy(poisson_model)$estimate), 5)
# Your answer goes here.
dispersiontest(poisson_model)
nb_model <- glm.nb(runs ~ walks + hits, data = teams)
nb_model
# Your answer goes here.
summary(poisson_model)
# Your answer goes here.
summary(nb_model)
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(qqplotr))
suppressPackageStartupMessages(library(AER))
suppressPackageStartupMessages(library(MASS))
library(tidyverse, quietly = TRUE)
library(broom)
library(performance)
library(qqplotr)
library(cowplot)
sigma <- 0.15
mu <-  1.85
x1 <- 1.78
x2 <- 1.95
(1/(sigma*sqrt(2*pi)))*exp(-((x1-mu)**2)/(2*sigma**2))*(1/(sigma*sqrt(2*pi)))*exp(-((x2-mu)**2)/(2*sigma**2))
# Do not delete this.
set.seed(123)
# Calculates the likelihood function of a normal distribution with a known standard deviation sigma.
# @param mu_sequence -> A vector of mu points to calculate the likelihood at.
# @param sigma -> A scalar for the known population standard deviation sigma.
# @param x -> A vector of the fixed sample to be used in the likelihood function.
# @return data -> A tibble with two columns, mu and the respective likelihood values.
gaussian_likelihood_mu <- function(mu_sequence, sigma, x) {
likelihood <- NULL
index <- 1
for (m in mu_sequence) {
likelihood[index] <- prod(dnorm(x, mean = m, sd = sigma))
index <- index + 1
}
data <- tibble(mu = mu_sequence, likelihood = likelihood)
return(data)
}
normal_sample_x <- rnorm(10, mean=1.85, sd = 0.15)
likelihood_values_mu <- gaussian_likelihood_mu(
seq(mean(normal_sample_x) - 0.15, mean(normal_sample_x) + 0.15, 0.001),
0.15,
normal_sample_x
)
likelihood_values_mu
ggplot(likelihood_values_mu, aes(x=mu, y=likelihood)) + geom_line() + geom_vline(xintercept=mean(normal_sample_x))
# Do not delete this.
set.seed(456)
# Calculates the likelihood function of a normal distribution with a known standard deviation sigma.
# @param sigma_sequence -> A vector of sigma points to calculate the likelihood at.
# @param mu -> A scalar for the known population mean mu
# @param x -> A vector of the fixed sample to be used in the likelihood function.
# @return data -> A tibble with two columns, sigma and the respective likelihood values.
gaussian_likelihood_sigma <- function(sigma_sequence, mu, x) {
likelihood <- NULL
index <- 1
for (m in sigma_sequence) {
likelihood[index] <- prod(dnorm(x, mean = mu, sd = m))
index <- index + 1
}
data <- tibble(sigma = sigma_sequence, likelihood = likelihood)
return(data)
}
# Your data simulation, tibble construction, and plotting go here.
normal_sample_x_2 <- rnorm(20, mean=1.73, sd = 0.2)
likelihood_values_sigma <- gaussian_likelihood_sigma(
seq(0.01, 0.5, 0.01),
1.73,
normal_sample_x_2
)
sum_s_n <- 0
for (val in normal_sample_x_2){
sum_s_n <- sum_s_n + (val - 1.73)**2
}
s_n <- sqrt(sum_s_n / length(normal_sample_x_2))
s_n
ggplot(likelihood_values_sigma, aes(x=sigma, y=likelihood)) + geom_line() +
geom_vline(xintercept=mean(s_n))
# Do not delete this.
set.seed(123)
# Generates samples of different samples sizes n = 10, 30, 50, ..., 30000 from a probability distribution.
# @param dist -> The desired probability distribution (e.g., rnorm, rpois, rexp, ...).
# @param ... -> The arguments to be used by the dist function.
# @return data -> A tibble with two columns, values and sample_size.
#
# EXAMPLE:  samples_of_different_sizes(rnorm, 123, 3), where 123 is the mean mu and 3 is the std dev sigma.
samples_of_different_sizes <- function(dist, ...) {
dist <- match.fun(dist)
sample_sizes <- seq(10, 30000, 20)
it <- 0
values <- list()
for (n in sample_sizes) {
it <- it + 1
values[[it]] <- tibble(value = dist(n, ...), sample_size = n)
}
data <- bind_rows(values)
return(data)
}
mu = 0
sd = 10
all_samples <- samples_of_different_sizes(rnorm, mu, sd)
all_samples
all_samples <- all_samples %>%
mutate(s_n_temp = (value - mu)**2)%>%
group_by(sample_size) %>%
summarise( s_n2 = sum(s_n_temp)/mean(sample_size))
ggplot(all_samples, aes(x=sample_size, y=s_n2)) + geom_line() + geom_hline(yintercept=100, color="red")
fat_content <- read_csv("milk_fat.csv")
head(fat_content)
initial_model <- lm(fat ~ week, data = fat_content)
tidy(initial_model)
glance(initial_model)
log_response_model <- lm(log(fat) ~ week, data = fat_content)
tidy(log_response_model)
glance(log_response_model)
wood_model <-  lm(log(fat) ~ week + log(week), data = fat_content)
tidy(wood_model)
glance(wood_model)
tidy(wood_model)
glance(wood_model)
# Your answer goes here.
predictions_milk_fat <- bind_rows(
tibble(predictions=predict(initial_model, newdata=tibble(week=1:45)),
week=1:45,
model='Initial Model'),
tibble(predictions=exp(predict(log_response_model, newdata=tibble(week=1:45))+ 0.5 * glance(log_response_model)$sigma^2),
week=1:45,
model='Response Model'),
tibble(predictions=exp(predict(wood_model, newdata=tibble(week=1:45)) + 0.5 * glance(wood_model)$sigma^2),
week=1:45,
model='Wood Model'))
predictions_milk_fat
plot_fat_content <- ggplot(fat_content, aes(x=week, y=fat)) + geom_point() + geom_vline(xintercept=35,  linetype="dotted", color='grey14') +  geom_hline(yintercept=0,  linetype="dotted", color='grey14')
plot_fat_content
plot_fat_content +
geom_line(data=predictions_milk_fat, aes(x=week, y=predictions, color=model))
round(anova(log_response_model,
wood_model, test = "Chi"), 4)
# Your coding answer goes here.
# Your coding answer goes here.
# Your coding answer goes here.
titanic <- read_csv("titanic.csv")
head(titanic)
options(repr.plot.height = 5.5, repr.plot.width = 18)
suppressMessages(print(titanic %>%
ggplot() +
geom_point(aes(Fare, Survived)) + geom_smooth(aes(Fare, Survived), method = "lm", se = FALSE) +
labs(y = "Survived", x = "Fare") + ggtitle("Fare vs Survived (by Sex)") +
theme(
plot.title = element_text(size = 24, face = "bold"),
axis.text = element_text(size = 14),
axis.title = element_text(size = 16)
) + facet_wrap(~Sex)))
options(repr.plot.height = 5.5, repr.plot.width = 18)
Titanic_scatterplot <- titanic %>%
ggplot() +
geom_point(aes(Fare, Survived)) +
geom_smooth(aes(Fare, Survived), method = "lm", se = FALSE) +
labs(y = "Survived", x = "Fare") + ggtitle("Fare vs Survived Probability") +
theme(
plot.title = element_text(size = 24, face = "bold"),
axis.text = element_text(size = 14),
axis.title = element_text(size = 16)
)
Titanic_scatterplot
# sex_fare <- titanic %>%
#   select(Sex, Fare)
#
# binomial_log_model <- glm(as.factor(Survived) ~ Sex + Fare, data = titanic,
#                             family = binomial)
#
# titanic$Survived_p <- round(predict(binomial_log_model, sex_fare, type = "response"), 2)
#
bin_log_model <- glm(as.factor(Survived) ~  Fare, data = titanic, family = binomial)
tidy(bin_log_model)
# Your answer goes here.
Titanic_scatterplot + geom_smooth(aes(Fare, Survived), method = "glm", method.args = c(family = binomial), se = FALSE, color = "red")
titanic <- titanic %>%
mutate(Sex = factor(Sex, levels = c("male","female")))
bin_log_model_2 <- glm(as.factor(Survived) ~  Fare + Sex , data = titanic, family = binomial)
tidy(bin_log_model_2)
glance(bin_log_model)
glance(bin_log_model_2)
tidy(bin_log_model_2)
round(exp(bin_log_model_2$coefficients), 2)
round(predict(bin_log_model_2, tibble(Fare = 100, Sex = "female"), type = "response"), 2)
# Your answer goes here.
print(binned_residuals(bin_log_model_2, size = 4))
library(Lahman)
teams <- Teams %>%
select(runs = R, walks = BB, hits = H) %>%
as_tibble()
head(teams)
ggplot(teams, aes(x=walks, y=runs)) + geom_point()
ggplot(teams, aes(x=hits, y=runs)) + geom_point()
# Your answer goes here.
poisson_model <- glm(runs ~ walks + hits, family = poisson, data = teams)
poisson_model
tidy(poisson_model)
round(exp(tidy(poisson_model)$estimate), 5)
# Your answer goes here.
dispersiontest(poisson_model)
nb_model <- glm.nb(runs ~ walks + hits, data = teams)
nb_model
# Your answer goes here.
summary(poisson_model)
# Your answer goes here.
summary(nb_model)
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(qqplotr))
suppressPackageStartupMessages(library(AER))
suppressPackageStartupMessages(library(MASS))
library(tidyverse, quietly = TRUE)
library(broom)
library(performance)
library(qqplotr)
library(cowplot)
ggplot(teams, aes(x=walks, y=runs)) + geom_point() + ggtitle('walks vs runs')
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(qqplotr))
suppressPackageStartupMessages(library(AER))
suppressPackageStartupMessages(library(MASS))
library(tidyverse, quietly = TRUE)
library(broom)
library(performance)
library(qqplotr)
library(cowplot)
sigma <- 0.15
mu <-  1.85
x1 <- 1.78
x2 <- 1.95
(1/(sigma*sqrt(2*pi)))*exp(-((x1-mu)**2)/(2*sigma**2))*(1/(sigma*sqrt(2*pi)))*exp(-((x2-mu)**2)/(2*sigma**2))
# Do not delete this.
set.seed(123)
# Calculates the likelihood function of a normal distribution with a known standard deviation sigma.
# @param mu_sequence -> A vector of mu points to calculate the likelihood at.
# @param sigma -> A scalar for the known population standard deviation sigma.
# @param x -> A vector of the fixed sample to be used in the likelihood function.
# @return data -> A tibble with two columns, mu and the respective likelihood values.
gaussian_likelihood_mu <- function(mu_sequence, sigma, x) {
likelihood <- NULL
index <- 1
for (m in mu_sequence) {
likelihood[index] <- prod(dnorm(x, mean = m, sd = sigma))
index <- index + 1
}
data <- tibble(mu = mu_sequence, likelihood = likelihood)
return(data)
}
normal_sample_x <- rnorm(10, mean=1.85, sd = 0.15)
likelihood_values_mu <- gaussian_likelihood_mu(
seq(mean(normal_sample_x) - 0.15, mean(normal_sample_x) + 0.15, 0.001),
0.15,
normal_sample_x
)
likelihood_values_mu
ggplot(likelihood_values_mu, aes(x=mu, y=likelihood)) + geom_line() + geom_vline(xintercept=mean(normal_sample_x))
# Do not delete this.
set.seed(456)
# Calculates the likelihood function of a normal distribution with a known standard deviation sigma.
# @param sigma_sequence -> A vector of sigma points to calculate the likelihood at.
# @param mu -> A scalar for the known population mean mu
# @param x -> A vector of the fixed sample to be used in the likelihood function.
# @return data -> A tibble with two columns, sigma and the respective likelihood values.
gaussian_likelihood_sigma <- function(sigma_sequence, mu, x) {
likelihood <- NULL
index <- 1
for (m in sigma_sequence) {
likelihood[index] <- prod(dnorm(x, mean = mu, sd = m))
index <- index + 1
}
data <- tibble(sigma = sigma_sequence, likelihood = likelihood)
return(data)
}
# Your data simulation, tibble construction, and plotting go here.
normal_sample_x_2 <- rnorm(20, mean=1.73, sd = 0.2)
likelihood_values_sigma <- gaussian_likelihood_sigma(
seq(0.01, 0.5, 0.01),
1.73,
normal_sample_x_2
)
sum_s_n <- 0
for (val in normal_sample_x_2){
sum_s_n <- sum_s_n + (val - 1.73)**2
}
s_n <- sqrt(sum_s_n / length(normal_sample_x_2))
s_n
ggplot(likelihood_values_sigma, aes(x=sigma, y=likelihood)) + geom_line() +
geom_vline(xintercept=mean(s_n))
# Do not delete this.
set.seed(123)
# Generates samples of different samples sizes n = 10, 30, 50, ..., 30000 from a probability distribution.
# @param dist -> The desired probability distribution (e.g., rnorm, rpois, rexp, ...).
# @param ... -> The arguments to be used by the dist function.
# @return data -> A tibble with two columns, values and sample_size.
#
# EXAMPLE:  samples_of_different_sizes(rnorm, 123, 3), where 123 is the mean mu and 3 is the std dev sigma.
samples_of_different_sizes <- function(dist, ...) {
dist <- match.fun(dist)
sample_sizes <- seq(10, 30000, 20)
it <- 0
values <- list()
for (n in sample_sizes) {
it <- it + 1
values[[it]] <- tibble(value = dist(n, ...), sample_size = n)
}
data <- bind_rows(values)
return(data)
}
mu = 0
sd = 10
all_samples <- samples_of_different_sizes(rnorm, mu, sd)
all_samples
all_samples <- all_samples %>%
mutate(s_n_temp = (value - mu)**2)%>%
group_by(sample_size) %>%
summarise( s_n2 = sum(s_n_temp)/mean(sample_size))
ggplot(all_samples, aes(x=sample_size, y=s_n2)) + geom_line() + geom_hline(yintercept=100, color="red")
fat_content <- read_csv("milk_fat.csv")
head(fat_content)
initial_model <- lm(fat ~ week, data = fat_content)
tidy(initial_model)
glance(initial_model)
log_response_model <- lm(log(fat) ~ week, data = fat_content)
tidy(log_response_model)
glance(log_response_model)
wood_model <-  lm(log(fat) ~ week + log(week), data = fat_content)
tidy(wood_model)
glance(wood_model)
tidy(wood_model)
glance(wood_model)
# Your answer goes here.
predictions_milk_fat <- bind_rows(
tibble(predictions=predict(initial_model, newdata=tibble(week=1:45)),
week=1:45,
model='Initial Model'),
tibble(predictions=exp(predict(log_response_model, newdata=tibble(week=1:45))+ 0.5 * glance(log_response_model)$sigma^2),
week=1:45,
model='Response Model'),
tibble(predictions=exp(predict(wood_model, newdata=tibble(week=1:45)) + 0.5 * glance(wood_model)$sigma^2),
week=1:45,
model='Wood Model'))
predictions_milk_fat
plot_fat_content <- ggplot(fat_content, aes(x=week, y=fat)) + geom_point() + geom_vline(xintercept=35,  linetype="dotted", color='grey14') +  geom_hline(yintercept=0,  linetype="dotted", color='grey14')
plot_fat_content
plot_fat_content +
geom_line(data=predictions_milk_fat, aes(x=week, y=predictions, color=model))
round(anova(log_response_model,
wood_model, test = "Chi"), 4)
# Your coding answer goes here.
# Your coding answer goes here.
# Your coding answer goes here.
titanic <- read_csv("titanic.csv")
head(titanic)
options(repr.plot.height = 5.5, repr.plot.width = 18)
suppressMessages(print(titanic %>%
ggplot() +
geom_point(aes(Fare, Survived)) + geom_smooth(aes(Fare, Survived), method = "lm", se = FALSE) +
labs(y = "Survived", x = "Fare") + ggtitle("Fare vs Survived (by Sex)") +
theme(
plot.title = element_text(size = 24, face = "bold"),
axis.text = element_text(size = 14),
axis.title = element_text(size = 16)
) + facet_wrap(~Sex)))
options(repr.plot.height = 5.5, repr.plot.width = 18)
Titanic_scatterplot <- titanic %>%
ggplot() +
geom_point(aes(Fare, Survived)) +
geom_smooth(aes(Fare, Survived), method = "lm", se = FALSE) +
labs(y = "Survived", x = "Fare") + ggtitle("Fare vs Survived") +
theme(
plot.title = element_text(size = 24, face = "bold"),
axis.text = element_text(size = 14),
axis.title = element_text(size = 16)
)
Titanic_scatterplot
# sex_fare <- titanic %>%
#   select(Sex, Fare)
#
# binomial_log_model <- glm(as.factor(Survived) ~ Sex + Fare, data = titanic,
#                             family = binomial)
#
# titanic$Survived_p <- round(predict(binomial_log_model, sex_fare, type = "response"), 2)
#
bin_log_model <- glm(as.factor(Survived) ~  Fare, data = titanic, family = binomial)
tidy(bin_log_model)
# Your answer goes here.
Titanic_scatterplot + geom_smooth(aes(Fare, Survived), method = "glm", method.args = c(family = binomial), se = FALSE, color = "red")
titanic <- titanic %>%
mutate(Sex = factor(Sex, levels = c("male","female")))
bin_log_model_2 <- glm(as.factor(Survived) ~  Fare + Sex , data = titanic, family = binomial)
tidy(bin_log_model_2)
glance(bin_log_model)
glance(bin_log_model_2)
tidy(bin_log_model_2)
round(exp(bin_log_model_2$coefficients), 2)
round(predict(bin_log_model_2, tibble(Fare = 100, Sex = "female"), type = "response"), 2)
# Your answer goes here.
print(binned_residuals(bin_log_model_2, size = 4))
library(Lahman)
teams <- Teams %>%
select(runs = R, walks = BB, hits = H) %>%
as_tibble()
head(teams)
ggplot(teams, aes(x=walks, y=runs)) + geom_point() + ggtitle('walks vs runs')
ggplot(teams, aes(x=hits, y=runs)) + geom_point()
# Your answer goes here.
poisson_model <- glm(runs ~ walks + hits, family = poisson, data = teams)
poisson_model
tidy(poisson_model)
round(exp(tidy(poisson_model)$estimate), 5)
# Your answer goes here.
dispersiontest(poisson_model)
nb_model <- glm.nb(runs ~ walks + hits, data = teams)
nb_model
# Your answer goes here.
summary(poisson_model)
# Your answer goes here.
summary(nb_model)
ggplot(teams, aes(x=walks, y=runs)) + geom_point() + ggtitle('# walks vs # runs')
ggplot(teams, aes(x=hits, y=runs)) + geom_point()+ ggtitle('# hits vs # runs')
plot_fat_content +
geom_line(data=predictions_milk_fat, aes(x=week, y=predictions, color=model)) + ggtitle('fat vs week')
plot_fat_content <- ggplot(fat_content, aes(x=week, y=fat)) + geom_point() + geom_vline(xintercept=35,  linetype="dotted", color='grey14') +  geom_hline(yintercept=0,  linetype="dotted", color='grey14')
plot_fat_content+ ggtitle('fat vs week')
setwd("~/UBC_MDS/courses/block04/DSCI532-Group16-R")
